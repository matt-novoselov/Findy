import SwiftUI

struct ObjectTagsPickerView: View {
    
    @Environment(AppViewModel.self) private var appViewModel
    
    // Define a computed property that builds the desired HStack.
    var capsuleView: some View {
        return HStack(alignment: .center, spacing: 5) {
            ForEach(appViewModel.savedObject.visionClassifications ?? [], id: \.self) { classifiedTag in
                CapsuleButton(
                    title: classifiedTag,
                    isSelected: appViewModel.savedObject.userPickedClassifications.contains(classifiedTag)
                ) {
                    if appViewModel.savedObject.userPickedClassifications.contains(classifiedTag) {
                        appViewModel.savedObject.userPickedClassifications.remove(classifiedTag)
                    } else {
                        appViewModel.savedObject.userPickedClassifications.insert(classifiedTag)
                    }
                }
            }
            
            CapsuleButton(
                title: "Add Tag",
                customSFSymbolName: "plus"
            ) {
                print("open keybord")
            }
        }
        .padding()
        .animation(.spring, value: appViewModel.savedObject.userPickedClassifications.count)
    }
    
    var body: some View {
        VStack (alignment: .leading){
            Text("Results generated by AI")
                .font(.title3)
                .fontWeight(.bold)
                .fontDesign(.rounded)
            
            Text("Select all relevant tags to improve classification.")
                .font(.body)
                .foregroundStyle(.secondary)
                .fontWeight(.semibold)
                .fontDesign(.rounded)
            
            ViewThatFits {
                // Try to show capsuleView directly
                capsuleView
                
                // Or in a horizontal ScrollView if it doesn't fit.
                ScrollView(.horizontal) {
                    capsuleView
                }
                .scrollIndicators(.hidden)
            }
        }
    }
}

// Custom capsule button component
struct CapsuleButton: View {
    let title: String
    var isSelected: Bool = false
    let buttonAccentColor: Color = .purple.mix(with: .white, by: 0.5)
    var customSFSymbolName: String? = nil
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack{
                if let customSFSymbolName {
                    Image(systemName: customSFSymbolName)
                        .fontDesign(.rounded)
                        .font(.subheadline)
                        .fontWeight(.bold)
                        .foregroundStyle(.primary)
                }
                
                Text(title)
                    .fontDesign(.rounded)
                    .font(.subheadline)
                    .foregroundColor(isSelected ? buttonAccentColor : .primary)
                    .lineLimit(1)
                    .transition(.move(edge: .leading))
                    .animation(.none, value: isSelected)
                
                if isSelected{
                    Image(systemName: "checkmark.circle.fill")
                        .fontDesign(.rounded)
                        .font(.subheadline)
                        .foregroundStyle(buttonAccentColor)
                        .transition(.scale(scale: 0, anchor: .leading))
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 8)
            .background(
                Capsule()
                    .strokeBorder(.tertiary, style: .init(lineWidth: 1))
                    .fill(isSelected ? buttonAccentColor.opacity(0.2) : .clear)
            )
            .background(Material.regular, in: .capsule)
            .animation(.bouncy, value: isSelected)
        }
        .buttonStyle(.plain)
    }
}

// Extension to process ML classified strings.
extension String {
    var processedMLTag: String {
        // Replace underscores with spaces.
        let withSpaces = self.replacingOccurrences(of: "_", with: " ")
        // Capitalize each word.
        return withSpaces.capitalized
    }
}
